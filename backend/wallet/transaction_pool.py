class TransactionPool():
    def __init__(self):
        self.transaction_map = {}

    def set_transaction(self, transaction):
        """
        Set a transaction in the transaction pool.
        """
        self.transaction_map[transaction.id] = transaction

    def existing_transaction(self, address):
        """
        Find transaction generated by the addrees in transaction pool.
        """
        for transaction in self.transaction_map.values():
            if transaction.input["address"] == address:
                return transaction
            

    def transaction_data(self):
        """
        Return the transactions of trasaction pool represented
        in json serialized form
        """
        transaction_values = self.transaction_map.values()
        transaction_data = list(map(
                lambda transaction: transaction.to_json(),
                transaction_values
        ))
        # For each transaction in tr valuesp, transorm to json
        
        return transaction_data

    def clear_blockchain_transactions(self, blockchain):
        """
        Delete transactions already recorded on blockchain
        """
        # Look in blockchain
        for block in blockchain.chain:
            for transaction in block.data:
                # delete if in transactionpool
                try:
                    del self.transaction_map[transaction["id"]]
                except KeyError:
                    pass

# Experimental code
def main():
    from backend.wallet.transaction import Transaction
    from backend.wallet.wallet import Wallet

    tp = TransactionPool()
    transaction = Transaction(Wallet(), "recipient", 100)
    tp.set_transaction(transaction)
    print(f"tp.transaction_map[transaction.id]: {tp.transaction_map[transaction.id]}")

if __name__ == "__main__":
    main()